<?php
/**
 * ProductGroupApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Vilo\ProductService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vilo\ProductService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vilo\ProductService\ApiException;
use Vilo\ProductService\Configuration;
use Vilo\ProductService\HeaderSelector;
use Vilo\ProductService\ObjectSerializer;

/**
 * ProductGroupApi Class Doc Comment
 *
 * @category Class
 * @package  Vilo\ProductService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductGroupApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteProductGroupItem
     *
     * Removes the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProductGroupItem($id)
    {
        $this->deleteProductGroupItemWithHttpInfo($id);
    }

    /**
     * Operation deleteProductGroupItemWithHttpInfo
     *
     * Removes the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductGroupItemWithHttpInfo($id)
    {
        $request = $this->deleteProductGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProductGroupItemAsync
     *
     * Removes the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductGroupItemAsync($id)
    {
        return $this->deleteProductGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProductGroupItemAsyncWithHttpInfo
     *
     * Removes the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteProductGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProductGroupItem'
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProductGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProductGroupItem'
            );
        }

        $resourcePath = '/product_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductGroupCollection
     *
     * Retrieves the collection of ProductGroup resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  string $name name (optional)
     * @param  string $fk_product_group_type fk_product_group_type (optional)
     * @param  string[] $fk_product_group_type2 fk_product_group_type2 (optional)
     * @param  string $product_group_items product_group_items (optional)
     * @param  string[] $product_group_items2 product_group_items2 (optional)
     * @param  bool $has_group_items has_group_items (optional)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\InlineResponse2003
     */
    public function getProductGroupCollection($page = 1, $items_per_page = 30, $name = null, $fk_product_group_type = null, $fk_product_group_type2 = null, $product_group_items = null, $product_group_items2 = null, $has_group_items = null)
    {
        list($response) = $this->getProductGroupCollectionWithHttpInfo($page, $items_per_page, $name, $fk_product_group_type, $fk_product_group_type2, $product_group_items, $product_group_items2, $has_group_items);
        return $response;
    }

    /**
     * Operation getProductGroupCollectionWithHttpInfo
     *
     * Retrieves the collection of ProductGroup resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  string $name (optional)
     * @param  string $fk_product_group_type (optional)
     * @param  string[] $fk_product_group_type2 (optional)
     * @param  string $product_group_items (optional)
     * @param  string[] $product_group_items2 (optional)
     * @param  bool $has_group_items (optional)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductGroupCollectionWithHttpInfo($page = 1, $items_per_page = 30, $name = null, $fk_product_group_type = null, $fk_product_group_type2 = null, $product_group_items = null, $product_group_items2 = null, $has_group_items = null)
    {
        $request = $this->getProductGroupCollectionRequest($page, $items_per_page, $name, $fk_product_group_type, $fk_product_group_type2, $product_group_items, $product_group_items2, $has_group_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductGroupCollectionAsync
     *
     * Retrieves the collection of ProductGroup resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  string $name (optional)
     * @param  string $fk_product_group_type (optional)
     * @param  string[] $fk_product_group_type2 (optional)
     * @param  string $product_group_items (optional)
     * @param  string[] $product_group_items2 (optional)
     * @param  bool $has_group_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductGroupCollectionAsync($page = 1, $items_per_page = 30, $name = null, $fk_product_group_type = null, $fk_product_group_type2 = null, $product_group_items = null, $product_group_items2 = null, $has_group_items = null)
    {
        return $this->getProductGroupCollectionAsyncWithHttpInfo($page, $items_per_page, $name, $fk_product_group_type, $fk_product_group_type2, $product_group_items, $product_group_items2, $has_group_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductGroupCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ProductGroup resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  string $name (optional)
     * @param  string $fk_product_group_type (optional)
     * @param  string[] $fk_product_group_type2 (optional)
     * @param  string $product_group_items (optional)
     * @param  string[] $product_group_items2 (optional)
     * @param  bool $has_group_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductGroupCollectionAsyncWithHttpInfo($page = 1, $items_per_page = 30, $name = null, $fk_product_group_type = null, $fk_product_group_type2 = null, $product_group_items = null, $product_group_items2 = null, $has_group_items = null)
    {
        $returnType = '\Vilo\ProductService\Model\InlineResponse2003';
        $request = $this->getProductGroupCollectionRequest($page, $items_per_page, $name, $fk_product_group_type, $fk_product_group_type2, $product_group_items, $product_group_items2, $has_group_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductGroupCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  string $name (optional)
     * @param  string $fk_product_group_type (optional)
     * @param  string[] $fk_product_group_type2 (optional)
     * @param  string $product_group_items (optional)
     * @param  string[] $product_group_items2 (optional)
     * @param  bool $has_group_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductGroupCollectionRequest($page = 1, $items_per_page = 30, $name = null, $fk_product_group_type = null, $fk_product_group_type2 = null, $product_group_items = null, $product_group_items2 = null, $has_group_items = null)
    {
        if ($items_per_page !== null && $items_per_page < 0) {
            throw new \InvalidArgumentException('invalid value for "$items_per_page" when calling ProductGroupApi.getProductGroupCollection, must be bigger than or equal to 0.');
        }


        $resourcePath = '/product_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, 'form', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, 'form', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, 'form', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($fk_product_group_type)) {
            $fk_product_group_type = ObjectSerializer::serializeCollection($fk_product_group_type, 'form', true);
        }
        if ($fk_product_group_type !== null) {
            $queryParams['fkProductGroupType'] = $fk_product_group_type;
        }
        // query params
        if ($fk_product_group_type2 !== null) {
            if('form' === 'form' && is_array($fk_product_group_type2)) {
                foreach($fk_product_group_type2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fkProductGroupType[]'] = $fk_product_group_type2;
            }
        }
        // query params
        if (is_array($product_group_items)) {
            $product_group_items = ObjectSerializer::serializeCollection($product_group_items, 'form', true);
        }
        if ($product_group_items !== null) {
            $queryParams['productGroupItems'] = $product_group_items;
        }
        // query params
        if ($product_group_items2 !== null) {
            if('form' === 'form' && is_array($product_group_items2)) {
                foreach($product_group_items2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productGroupItems[]'] = $product_group_items2;
            }
        }
        // query params
        if (is_array($has_group_items)) {
            $has_group_items = ObjectSerializer::serializeCollection($has_group_items, 'form', true);
        }
        if ($has_group_items !== null) {
            $queryParams['hasGroupItems'] = $has_group_items;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductGroupItem
     *
     * Retrieves a ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\ProductGroupJsonld
     */
    public function getProductGroupItem($id)
    {
        list($response) = $this->getProductGroupItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getProductGroupItemWithHttpInfo
     *
     * Retrieves a ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\ProductGroupJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductGroupItemWithHttpInfo($id)
    {
        $request = $this->getProductGroupItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\ProductGroupJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\ProductGroupJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\ProductGroupJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductGroupItemAsync
     *
     * Retrieves a ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductGroupItemAsync($id)
    {
        return $this->getProductGroupItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductGroupItemAsyncWithHttpInfo
     *
     * Retrieves a ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductGroupItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
        $request = $this->getProductGroupItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductGroupItem'
     *
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductGroupItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProductGroupItem'
            );
        }

        $resourcePath = '/product_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchProductGroupItem
     *
     * Updates the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\ProductGroupJsonld
     */
    public function patchProductGroupItem($id, $product_group_jsonld)
    {
        list($response) = $this->patchProductGroupItemWithHttpInfo($id, $product_group_jsonld);
        return $response;
    }

    /**
     * Operation patchProductGroupItemWithHttpInfo
     *
     * Updates the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\ProductGroupJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchProductGroupItemWithHttpInfo($id, $product_group_jsonld)
    {
        $request = $this->patchProductGroupItemRequest($id, $product_group_jsonld);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\ProductGroupJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\ProductGroupJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\ProductGroupJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchProductGroupItemAsync
     *
     * Updates the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchProductGroupItemAsync($id, $product_group_jsonld)
    {
        return $this->patchProductGroupItemAsyncWithHttpInfo($id, $product_group_jsonld)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchProductGroupItemAsyncWithHttpInfo
     *
     * Updates the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchProductGroupItemAsyncWithHttpInfo($id, $product_group_jsonld)
    {
        $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
        $request = $this->patchProductGroupItemRequest($id, $product_group_jsonld);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchProductGroupItem'
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchProductGroupItemRequest($id, $product_group_jsonld)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchProductGroupItem'
            );
        }
        // verify the required parameter 'product_group_jsonld' is set
        if ($product_group_jsonld === null || (is_array($product_group_jsonld) && count($product_group_jsonld) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_group_jsonld when calling patchProductGroupItem'
            );
        }

        $resourcePath = '/product_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html'],
                ['application/merge-patch+json', 'application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($product_group_jsonld)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_group_jsonld));
            } else {
                $httpBody = $product_group_jsonld;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postProductGroupCollection
     *
     * Creates a ProductGroup resource.
     *
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The new ProductGroup resource (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\ProductGroupJsonld
     */
    public function postProductGroupCollection($product_group_jsonld)
    {
        list($response) = $this->postProductGroupCollectionWithHttpInfo($product_group_jsonld);
        return $response;
    }

    /**
     * Operation postProductGroupCollectionWithHttpInfo
     *
     * Creates a ProductGroup resource.
     *
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The new ProductGroup resource (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\ProductGroupJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function postProductGroupCollectionWithHttpInfo($product_group_jsonld)
    {
        $request = $this->postProductGroupCollectionRequest($product_group_jsonld);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Vilo\ProductService\Model\ProductGroupJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\ProductGroupJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\ProductGroupJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postProductGroupCollectionAsync
     *
     * Creates a ProductGroup resource.
     *
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The new ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProductGroupCollectionAsync($product_group_jsonld)
    {
        return $this->postProductGroupCollectionAsyncWithHttpInfo($product_group_jsonld)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postProductGroupCollectionAsyncWithHttpInfo
     *
     * Creates a ProductGroup resource.
     *
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The new ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProductGroupCollectionAsyncWithHttpInfo($product_group_jsonld)
    {
        $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
        $request = $this->postProductGroupCollectionRequest($product_group_jsonld);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postProductGroupCollection'
     *
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The new ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postProductGroupCollectionRequest($product_group_jsonld)
    {
        // verify the required parameter 'product_group_jsonld' is set
        if ($product_group_jsonld === null || (is_array($product_group_jsonld) && count($product_group_jsonld) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_group_jsonld when calling postProductGroupCollection'
            );
        }

        $resourcePath = '/product_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($product_group_jsonld)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_group_jsonld));
            } else {
                $httpBody = $product_group_jsonld;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putProductGroupItem
     *
     * Replaces the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\ProductGroupJsonld
     */
    public function putProductGroupItem($id, $product_group_jsonld)
    {
        list($response) = $this->putProductGroupItemWithHttpInfo($id, $product_group_jsonld);
        return $response;
    }

    /**
     * Operation putProductGroupItemWithHttpInfo
     *
     * Replaces the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\ProductGroupJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function putProductGroupItemWithHttpInfo($id, $product_group_jsonld)
    {
        $request = $this->putProductGroupItemRequest($id, $product_group_jsonld);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\ProductGroupJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\ProductGroupJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\ProductGroupJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putProductGroupItemAsync
     *
     * Replaces the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putProductGroupItemAsync($id, $product_group_jsonld)
    {
        return $this->putProductGroupItemAsyncWithHttpInfo($id, $product_group_jsonld)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putProductGroupItemAsyncWithHttpInfo
     *
     * Replaces the ProductGroup resource.
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putProductGroupItemAsyncWithHttpInfo($id, $product_group_jsonld)
    {
        $returnType = '\Vilo\ProductService\Model\ProductGroupJsonld';
        $request = $this->putProductGroupItemRequest($id, $product_group_jsonld);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putProductGroupItem'
     *
     * @param  string $id Resource identifier (required)
     * @param  \Vilo\ProductService\Model\ProductGroupJsonld $product_group_jsonld The updated ProductGroup resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putProductGroupItemRequest($id, $product_group_jsonld)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putProductGroupItem'
            );
        }
        // verify the required parameter 'product_group_jsonld' is set
        if ($product_group_jsonld === null || (is_array($product_group_jsonld) && count($product_group_jsonld) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_group_jsonld when calling putProductGroupItem'
            );
        }

        $resourcePath = '/product_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/hal+json', 'application/vnd.api+json', 'application/json', 'application/xml', 'text/xml', 'application/x-yaml', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($product_group_jsonld)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_group_jsonld));
            } else {
                $httpBody = $product_group_jsonld;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

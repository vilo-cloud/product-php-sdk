<?php
/**
 * AttributeValueApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Vilo\ProductService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vilo\ProductService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vilo\ProductService\ApiException;
use Vilo\ProductService\Configuration;
use Vilo\ProductService\HeaderSelector;
use Vilo\ProductService\ObjectSerializer;

/**
 * AttributeValueApi Class Doc Comment
 *
 * @category Class
 * @package  Vilo\ProductService
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AttributeValueApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation attributableGetAttributeValuesProductSubresource
     *
     * Get All the AttributeValues for the entity Product with {id}
     *
     * @param  string $id Product identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\InlineResponse2006
     */
    public function attributableGetAttributeValuesProductSubresource($id, $page = 1, $items_per_page = 30)
    {
        list($response) = $this->attributableGetAttributeValuesProductSubresourceWithHttpInfo($id, $page, $items_per_page);
        return $response;
    }

    /**
     * Operation attributableGetAttributeValuesProductSubresourceWithHttpInfo
     *
     * Get All the AttributeValues for the entity Product with {id}
     *
     * @param  string $id Product identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributableGetAttributeValuesProductSubresourceWithHttpInfo($id, $page = 1, $items_per_page = 30)
    {
        $request = $this->attributableGetAttributeValuesProductSubresourceRequest($id, $page, $items_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\InlineResponse2006';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributableGetAttributeValuesProductSubresourceAsync
     *
     * Get All the AttributeValues for the entity Product with {id}
     *
     * @param  string $id Product identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributableGetAttributeValuesProductSubresourceAsync($id, $page = 1, $items_per_page = 30)
    {
        return $this->attributableGetAttributeValuesProductSubresourceAsyncWithHttpInfo($id, $page, $items_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributableGetAttributeValuesProductSubresourceAsyncWithHttpInfo
     *
     * Get All the AttributeValues for the entity Product with {id}
     *
     * @param  string $id Product identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributableGetAttributeValuesProductSubresourceAsyncWithHttpInfo($id, $page = 1, $items_per_page = 30)
    {
        $returnType = '\Vilo\ProductService\Model\InlineResponse2006';
        $request = $this->attributableGetAttributeValuesProductSubresourceRequest($id, $page, $items_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributableGetAttributeValuesProductSubresource'
     *
     * @param  string $id Product identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributableGetAttributeValuesProductSubresourceRequest($id, $page = 1, $items_per_page = 30)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling attributableGetAttributeValuesProductSubresource'
            );
        }
        if ($items_per_page !== null && $items_per_page < 0) {
            throw new \InvalidArgumentException('invalid value for "$items_per_page" when calling AttributeValueApi.attributableGetAttributeValuesProductSubresource, must be bigger than or equal to 0.');
        }


        $resourcePath = '/products/{id}/attribute_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, 'form', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, 'form', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attributeValueAssignProductItem
     *
     * Assign attribute value to a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\AttributeValueJsonld
     */
    public function attributeValueAssignProductItem($id, $attribute_value_id)
    {
        list($response) = $this->attributeValueAssignProductItemWithHttpInfo($id, $attribute_value_id);
        return $response;
    }

    /**
     * Operation attributeValueAssignProductItemWithHttpInfo
     *
     * Assign attribute value to a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\AttributeValueJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeValueAssignProductItemWithHttpInfo($id, $attribute_value_id)
    {
        $request = $this->attributeValueAssignProductItemRequest($id, $attribute_value_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\AttributeValueJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\AttributeValueJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\AttributeValueJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeValueAssignProductItemAsync
     *
     * Assign attribute value to a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueAssignProductItemAsync($id, $attribute_value_id)
    {
        return $this->attributeValueAssignProductItemAsyncWithHttpInfo($id, $attribute_value_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeValueAssignProductItemAsyncWithHttpInfo
     *
     * Assign attribute value to a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueAssignProductItemAsyncWithHttpInfo($id, $attribute_value_id)
    {
        $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
        $request = $this->attributeValueAssignProductItemRequest($id, $attribute_value_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeValueAssignProductItem'
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeValueAssignProductItemRequest($id, $attribute_value_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling attributeValueAssignProductItem'
            );
        }
        // verify the required parameter 'attribute_value_id' is set
        if ($attribute_value_id === null || (is_array($attribute_value_id) && count($attribute_value_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_value_id when calling attributeValueAssignProductItem'
            );
        }

        $resourcePath = '/products/{id}/assign_attribute_value/{attributeValueId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($attribute_value_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeValueId' . '}',
                ObjectSerializer::toPathValue($attribute_value_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attributeValueCreateProductCollection
     *
     * Add an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  \Vilo\ProductService\Model\AttributeValueJsonld $attribute_value_jsonld Creates a AttributeValue on Product. (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\AttributeValueJsonld
     */
    public function attributeValueCreateProductCollection($attribute_reference_id, $attribute_value_jsonld)
    {
        list($response) = $this->attributeValueCreateProductCollectionWithHttpInfo($attribute_reference_id, $attribute_value_jsonld);
        return $response;
    }

    /**
     * Operation attributeValueCreateProductCollectionWithHttpInfo
     *
     * Add an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  \Vilo\ProductService\Model\AttributeValueJsonld $attribute_value_jsonld Creates a AttributeValue on Product. (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\AttributeValueJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeValueCreateProductCollectionWithHttpInfo($attribute_reference_id, $attribute_value_jsonld)
    {
        $request = $this->attributeValueCreateProductCollectionRequest($attribute_reference_id, $attribute_value_jsonld);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Vilo\ProductService\Model\AttributeValueJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\AttributeValueJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\AttributeValueJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeValueCreateProductCollectionAsync
     *
     * Add an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  \Vilo\ProductService\Model\AttributeValueJsonld $attribute_value_jsonld Creates a AttributeValue on Product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueCreateProductCollectionAsync($attribute_reference_id, $attribute_value_jsonld)
    {
        return $this->attributeValueCreateProductCollectionAsyncWithHttpInfo($attribute_reference_id, $attribute_value_jsonld)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeValueCreateProductCollectionAsyncWithHttpInfo
     *
     * Add an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  \Vilo\ProductService\Model\AttributeValueJsonld $attribute_value_jsonld Creates a AttributeValue on Product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueCreateProductCollectionAsyncWithHttpInfo($attribute_reference_id, $attribute_value_jsonld)
    {
        $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
        $request = $this->attributeValueCreateProductCollectionRequest($attribute_reference_id, $attribute_value_jsonld);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeValueCreateProductCollection'
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  \Vilo\ProductService\Model\AttributeValueJsonld $attribute_value_jsonld Creates a AttributeValue on Product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeValueCreateProductCollectionRequest($attribute_reference_id, $attribute_value_jsonld)
    {
        // verify the required parameter 'attribute_reference_id' is set
        if ($attribute_reference_id === null || (is_array($attribute_reference_id) && count($attribute_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_reference_id when calling attributeValueCreateProductCollection'
            );
        }
        // verify the required parameter 'attribute_value_jsonld' is set
        if ($attribute_value_jsonld === null || (is_array($attribute_value_jsonld) && count($attribute_value_jsonld) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_value_jsonld when calling attributeValueCreateProductCollection'
            );
        }

        $resourcePath = '/products/attributes/{attributeReferenceId}/attribute_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($attribute_reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeReferenceId' . '}',
                ObjectSerializer::toPathValue($attribute_reference_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                ['application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($attribute_value_jsonld)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($attribute_value_jsonld));
            } else {
                $httpBody = $attribute_value_jsonld;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attributeValueGetProductCollection
     *
     * Get the AttributeValues for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\InlineResponse2006
     */
    public function attributeValueGetProductCollection($attribute_reference_id, $page = 1, $items_per_page = 30)
    {
        list($response) = $this->attributeValueGetProductCollectionWithHttpInfo($attribute_reference_id, $page, $items_per_page);
        return $response;
    }

    /**
     * Operation attributeValueGetProductCollectionWithHttpInfo
     *
     * Get the AttributeValues for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeValueGetProductCollectionWithHttpInfo($attribute_reference_id, $page = 1, $items_per_page = 30)
    {
        $request = $this->attributeValueGetProductCollectionRequest($attribute_reference_id, $page, $items_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\InlineResponse2006';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeValueGetProductCollectionAsync
     *
     * Get the AttributeValues for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueGetProductCollectionAsync($attribute_reference_id, $page = 1, $items_per_page = 30)
    {
        return $this->attributeValueGetProductCollectionAsyncWithHttpInfo($attribute_reference_id, $page, $items_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeValueGetProductCollectionAsyncWithHttpInfo
     *
     * Get the AttributeValues for an Attribute on the Product entity.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueGetProductCollectionAsyncWithHttpInfo($attribute_reference_id, $page = 1, $items_per_page = 30)
    {
        $returnType = '\Vilo\ProductService\Model\InlineResponse2006';
        $request = $this->attributeValueGetProductCollectionRequest($attribute_reference_id, $page, $items_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeValueGetProductCollection'
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeValueGetProductCollectionRequest($attribute_reference_id, $page = 1, $items_per_page = 30)
    {
        // verify the required parameter 'attribute_reference_id' is set
        if ($attribute_reference_id === null || (is_array($attribute_reference_id) && count($attribute_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_reference_id when calling attributeValueGetProductCollection'
            );
        }
        if ($items_per_page !== null && $items_per_page < 0) {
            throw new \InvalidArgumentException('invalid value for "$items_per_page" when calling AttributeValueApi.attributeValueGetProductCollection, must be bigger than or equal to 0.');
        }


        $resourcePath = '/products/attribute_references/{attributeReferenceId}/attribute_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, 'form', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, 'form', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }


        // path params
        if ($attribute_reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeReferenceId' . '}',
                ObjectSerializer::toPathValue($attribute_reference_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attributeValueGetProductItem
     *
     * Retrieves a Product resource.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  string $id Resource identifier (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\AttributeValueJsonld
     */
    public function attributeValueGetProductItem($attribute_reference_id, $id)
    {
        list($response) = $this->attributeValueGetProductItemWithHttpInfo($attribute_reference_id, $id);
        return $response;
    }

    /**
     * Operation attributeValueGetProductItemWithHttpInfo
     *
     * Retrieves a Product resource.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  string $id Resource identifier (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\AttributeValueJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeValueGetProductItemWithHttpInfo($attribute_reference_id, $id)
    {
        $request = $this->attributeValueGetProductItemRequest($attribute_reference_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\AttributeValueJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\AttributeValueJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\AttributeValueJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeValueGetProductItemAsync
     *
     * Retrieves a Product resource.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueGetProductItemAsync($attribute_reference_id, $id)
    {
        return $this->attributeValueGetProductItemAsyncWithHttpInfo($attribute_reference_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeValueGetProductItemAsyncWithHttpInfo
     *
     * Retrieves a Product resource.
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueGetProductItemAsyncWithHttpInfo($attribute_reference_id, $id)
    {
        $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
        $request = $this->attributeValueGetProductItemRequest($attribute_reference_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeValueGetProductItem'
     *
     * @param  string $attribute_reference_id The AttributeReference ID (required)
     * @param  string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeValueGetProductItemRequest($attribute_reference_id, $id)
    {
        // verify the required parameter 'attribute_reference_id' is set
        if ($attribute_reference_id === null || (is_array($attribute_reference_id) && count($attribute_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_reference_id when calling attributeValueGetProductItem'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling attributeValueGetProductItem'
            );
        }

        $resourcePath = '/products/attribute_references/{attributeReferenceId}/attribute_values/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($attribute_reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeReferenceId' . '}',
                ObjectSerializer::toPathValue($attribute_reference_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attributeValueUnassignProductItem
     *
     * Unassign attribute value from a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\AttributeValueJsonld
     */
    public function attributeValueUnassignProductItem($id, $attribute_value_id)
    {
        list($response) = $this->attributeValueUnassignProductItemWithHttpInfo($id, $attribute_value_id);
        return $response;
    }

    /**
     * Operation attributeValueUnassignProductItemWithHttpInfo
     *
     * Unassign attribute value from a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\AttributeValueJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeValueUnassignProductItemWithHttpInfo($id, $attribute_value_id)
    {
        $request = $this->attributeValueUnassignProductItemRequest($id, $attribute_value_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('\Vilo\ProductService\Model\AttributeValueJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\AttributeValueJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\AttributeValueJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeValueUnassignProductItemAsync
     *
     * Unassign attribute value from a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueUnassignProductItemAsync($id, $attribute_value_id)
    {
        return $this->attributeValueUnassignProductItemAsyncWithHttpInfo($id, $attribute_value_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeValueUnassignProductItemAsyncWithHttpInfo
     *
     * Unassign attribute value from a Product entity.
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueUnassignProductItemAsyncWithHttpInfo($id, $attribute_value_id)
    {
        $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
        $request = $this->attributeValueUnassignProductItemRequest($id, $attribute_value_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeValueUnassignProductItem'
     *
     * @param  string $id The Product ID (required)
     * @param  string $attribute_value_id The AttributeValue ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeValueUnassignProductItemRequest($id, $attribute_value_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling attributeValueUnassignProductItem'
            );
        }
        // verify the required parameter 'attribute_value_id' is set
        if ($attribute_value_id === null || (is_array($attribute_value_id) && count($attribute_value_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_value_id when calling attributeValueUnassignProductItem'
            );
        }

        $resourcePath = '/products/{id}/unassign_attribute_value/{attributeValueId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($attribute_value_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeValueId' . '}',
                ObjectSerializer::toPathValue($attribute_value_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attributeValueUpdateProductItem
     *
     * Update an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_value_id The AttributeValue ID (required)
     * @param  \Vilo\ProductService\Model\InlineObject $inline_object inline_object (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vilo\ProductService\Model\AttributeValueJsonld
     */
    public function attributeValueUpdateProductItem($attribute_value_id, $inline_object)
    {
        list($response) = $this->attributeValueUpdateProductItemWithHttpInfo($attribute_value_id, $inline_object);
        return $response;
    }

    /**
     * Operation attributeValueUpdateProductItemWithHttpInfo
     *
     * Update an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_value_id The AttributeValue ID (required)
     * @param  \Vilo\ProductService\Model\InlineObject $inline_object (required)
     *
     * @throws \Vilo\ProductService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vilo\ProductService\Model\AttributeValueJsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function attributeValueUpdateProductItemWithHttpInfo($attribute_value_id, $inline_object)
    {
        $request = $this->attributeValueUpdateProductItemRequest($attribute_value_id, $inline_object);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vilo\ProductService\Model\AttributeValueJsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vilo\ProductService\Model\AttributeValueJsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vilo\ProductService\Model\AttributeValueJsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attributeValueUpdateProductItemAsync
     *
     * Update an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_value_id The AttributeValue ID (required)
     * @param  \Vilo\ProductService\Model\InlineObject $inline_object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueUpdateProductItemAsync($attribute_value_id, $inline_object)
    {
        return $this->attributeValueUpdateProductItemAsyncWithHttpInfo($attribute_value_id, $inline_object)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attributeValueUpdateProductItemAsyncWithHttpInfo
     *
     * Update an AttributeValue for an Attribute on the Product entity.
     *
     * @param  string $attribute_value_id The AttributeValue ID (required)
     * @param  \Vilo\ProductService\Model\InlineObject $inline_object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attributeValueUpdateProductItemAsyncWithHttpInfo($attribute_value_id, $inline_object)
    {
        $returnType = '\Vilo\ProductService\Model\AttributeValueJsonld';
        $request = $this->attributeValueUpdateProductItemRequest($attribute_value_id, $inline_object);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attributeValueUpdateProductItem'
     *
     * @param  string $attribute_value_id The AttributeValue ID (required)
     * @param  \Vilo\ProductService\Model\InlineObject $inline_object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attributeValueUpdateProductItemRequest($attribute_value_id, $inline_object)
    {
        // verify the required parameter 'attribute_value_id' is set
        if ($attribute_value_id === null || (is_array($attribute_value_id) && count($attribute_value_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_value_id when calling attributeValueUpdateProductItem'
            );
        }
        // verify the required parameter 'inline_object' is set
        if ($inline_object === null || (is_array($inline_object) && count($inline_object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_object when calling attributeValueUpdateProductItem'
            );
        }

        $resourcePath = '/products/attributes/attribute_values/{attributeValueId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($attribute_value_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeValueId' . '}',
                ObjectSerializer::toPathValue($attribute_value_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'text/csv', 'text/html'],
                ['application/json', 'application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object));
            } else {
                $httpBody = $inline_object;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
